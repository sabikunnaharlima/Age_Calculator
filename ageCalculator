import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import calendar

class AgeCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("üéâ‚ú® Magical Age Calculator ‚ú®üéâ")
        # Set window size to match typical desktop resolution
        self.root.geometry("1024x768")
        self.root.configure(bg='#FFE5E5')  # Soft pink background
        
        # Create and pack widgets
        title = tk.Label(root, text="üåü‚ú® Magical Age Calculator ‚ú®üåü", font=('Comic Sans MS', 32, 'bold'), 
                        bg='#FFE5E5', fg='#FF69B4')  # Hot pink text
        title.pack(pady=40)
        
        # Birth Date Entry
        tk.Label(root, text="üéÇ Enter Your Magical Birthday! üåà", font=('Comic Sans MS', 16),
                bg='#FFE5E5', fg='#9370DB').pack()  # Purple text
        
        # Frame for date inputs
        date_frame = tk.Frame(root, bg='#FFE5E5')
        date_frame.pack(pady=20)
        
        # Day
        tk.Label(date_frame, text="üéà Day:", bg='#FFE5E5', fg='#4169E1', font=('Comic Sans MS', 14)).pack(side=tk.LEFT, padx=10)  # Royal blue
        self.day_entry = tk.Entry(date_frame, width=4, font=('Comic Sans MS', 14),
                                 bg='#E6E6FA', fg='#4169E1')  # Lavender background
        self.day_entry.pack(side=tk.LEFT, padx=10)
        
        # Month
        tk.Label(date_frame, text="üå∏ Month:", bg='#FFE5E5', fg='#32CD32', font=('Comic Sans MS', 14)).pack(side=tk.LEFT, padx=10)  # Lime green
        self.month_entry = tk.Entry(date_frame, width=4, font=('Comic Sans MS', 14),
                                   bg='#E6E6FA', fg='#32CD32')
        self.month_entry.pack(side=tk.LEFT, padx=10)
        
        # Year
        tk.Label(date_frame, text="‚≠ê Year:", bg='#FFE5E5', fg='#FF8C00', font=('Comic Sans MS', 14)).pack(side=tk.LEFT, padx=10)  # Dark orange
        self.year_entry = tk.Entry(date_frame, width=6, font=('Comic Sans MS', 14),
                                  bg='#E6E6FA', fg='#FF8C00')
        self.year_entry.pack(side=tk.LEFT, padx=10)
        
        # Calculate Button
        calc_button = tk.Button(root, text="‚ú® Reveal Your Magical Age ‚ú®", command=self.calculate_age,
                              font=('Comic Sans MS', 16, 'bold'), bg='#DDA0DD', fg='white',  # Plum button
                              activebackground='#BA55D3', activeforeground='white')
        calc_button.pack(pady=40)
        
        # Result Labels
        self.result_frame = tk.Frame(root, bg='#FFE5E5')
        self.result_frame.pack(pady=40)
        
        self.age_label = tk.Label(self.result_frame, text="", font=('Comic Sans MS', 20, 'bold'),
                                 bg='#FFE5E5', fg='#FF1493')  # Deep pink
        self.age_label.pack()
        
        self.detail_label = tk.Label(self.result_frame, text="", font=('Comic Sans MS', 16),
                                    bg='#FFE5E5', fg='#9370DB')  # Medium purple
        self.detail_label.pack()
        
        self.birthday_label = tk.Label(self.result_frame, text="", font=('Comic Sans MS', 16),
                                      bg='#FFE5E5', fg='#20B2AA')  # Light sea green
        self.birthday_label.pack()
    
    def calculate_age(self):
        try:
            # Get input values
            day = int(self.day_entry.get())
            month = int(self.month_entry.get())
            year = int(self.year_entry.get())
            
            # Create date object for birth date
            birth_date = datetime(year, month, day)
            current_date = datetime.now()
            
            # Calculate age
            age_years = current_date.year - birth_date.year
            age_months = current_date.month - birth_date.month
            age_days = current_date.day - birth_date.day
            
            # Adjust for negative days/months
            if age_days < 0:
                age_months -= 1
                # Get days in previous month
                last_month = current_date.month - 1 if current_date.month > 1 else 12
                last_month_days = calendar.monthrange(current_date.year, last_month)[1]
                age_days += last_month_days
                
            if age_months < 0:
                age_years -= 1
                age_months += 12
            
            # Check if birthday is today
            is_birthday = current_date.month == birth_date.month and current_date.day == birth_date.day
            
            # Calculate next birthday
            next_birthday = datetime(current_date.year, birth_date.month, birth_date.day)
            if next_birthday < current_date:
                next_birthday = datetime(current_date.year + 1, birth_date.month, birth_date.day)
            days_to_birthday = (next_birthday - current_date).days
            
            # Display results with appropriate messages
            if is_birthday:
                self.age_label.config(
                    text=f"üéâüéàüéä HAPPY BIRTHDAY! üéäüéàüéâ\nYou're {age_years} Magical Years Young! üåü‚ú®")
                self.detail_label.config(
                    text=f"üéÇ May Your Day Sparkle with Joy and Wonder! üåà\nüéÅ Let the Celebrations Begin! üéä")
                self.birthday_label.config(
                    text=f"üåü Today is Your Special Day! üåü\nüé≠ Dance, Laugh, and Create Beautiful Memories! üé™")
            else:
                self.age_label.config(
                    text=f"‚ú® You've Lived {age_years} Magical Years, {age_months} Wonderful Months,\nand {age_days} Beautiful Days! üåü")
                self.detail_label.config(
                    text=f"üåà That's {age_years * 12 + age_months} Months of Adventures!\nüé† Or {(current_date - birth_date).days} Days of Pure Magic! ‚ú®")
                self.birthday_label.config(
                    text=f"üé™ Only {days_to_birthday} Days Until Your Next Magical Celebration! üé≠\nüéà The Countdown Begins! üé™‚ú®")
            
        except ValueError:
            messagebox.showerror("üé≠ Oopsie!", "‚ú® Please enter valid magical numbers for your birthday! üåü")
        except Exception as e:
            messagebox.showerror("üé™ Magic Hiccup!", f"‚ú® A magical mishap occurred! {str(e)} üåü")

if __name__ == "__main__":
    root = tk.Tk()
    app = AgeCalculator(root)
    root.mainloop()